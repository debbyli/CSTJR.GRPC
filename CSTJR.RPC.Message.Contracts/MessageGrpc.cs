// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Message.proto
// </auto-generated>
#pragma warning disable 1591
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace CSTJR.RPC.Message.Contracts {
  public static partial class MessageService
  {
    static readonly string __ServiceName = "CSTJR.RPC.Message.Contracts.MessageService";

    static readonly grpc::Marshaller<global::CSTJR.RPC.Message.Contracts.SendMessageRequest> __Marshaller_SendMessageRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::CSTJR.RPC.Message.Contracts.SendMessageRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::CSTJR.RPC.Message.Contracts.SendMessageReply> __Marshaller_SendMessageReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::CSTJR.RPC.Message.Contracts.SendMessageReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::CSTJR.RPC.Message.Contracts.SendTaskRequest> __Marshaller_SendTaskRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::CSTJR.RPC.Message.Contracts.SendTaskRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::CSTJR.RPC.Message.Contracts.SendTaskReply> __Marshaller_SendTaskReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::CSTJR.RPC.Message.Contracts.SendTaskReply.Parser.ParseFrom);

    static readonly grpc::Method<global::CSTJR.RPC.Message.Contracts.SendMessageRequest, global::CSTJR.RPC.Message.Contracts.SendMessageReply> __Method_SendMessage = new grpc::Method<global::CSTJR.RPC.Message.Contracts.SendMessageRequest, global::CSTJR.RPC.Message.Contracts.SendMessageReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendMessage",
        __Marshaller_SendMessageRequest,
        __Marshaller_SendMessageReply);

    static readonly grpc::Method<global::CSTJR.RPC.Message.Contracts.SendTaskRequest, global::CSTJR.RPC.Message.Contracts.SendTaskReply> __Method_SendTaskMessage = new grpc::Method<global::CSTJR.RPC.Message.Contracts.SendTaskRequest, global::CSTJR.RPC.Message.Contracts.SendTaskReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendTaskMessage",
        __Marshaller_SendTaskRequest,
        __Marshaller_SendTaskReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::CSTJR.RPC.Message.Contracts.MessageReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of MessageService</summary>
    public abstract partial class MessageServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::CSTJR.RPC.Message.Contracts.SendMessageReply> SendMessage(global::CSTJR.RPC.Message.Contracts.SendMessageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::CSTJR.RPC.Message.Contracts.SendTaskReply> SendTaskMessage(global::CSTJR.RPC.Message.Contracts.SendTaskRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for MessageService</summary>
    public partial class MessageServiceClient : grpc::ClientBase<MessageServiceClient>
    {
      /// <summary>Creates a new client for MessageService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MessageServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for MessageService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MessageServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MessageServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MessageServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::CSTJR.RPC.Message.Contracts.SendMessageReply SendMessage(global::CSTJR.RPC.Message.Contracts.SendMessageRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SendMessage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::CSTJR.RPC.Message.Contracts.SendMessageReply SendMessage(global::CSTJR.RPC.Message.Contracts.SendMessageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendMessage, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::CSTJR.RPC.Message.Contracts.SendMessageReply> SendMessageAsync(global::CSTJR.RPC.Message.Contracts.SendMessageRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SendMessageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::CSTJR.RPC.Message.Contracts.SendMessageReply> SendMessageAsync(global::CSTJR.RPC.Message.Contracts.SendMessageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendMessage, null, options, request);
      }
      public virtual global::CSTJR.RPC.Message.Contracts.SendTaskReply SendTaskMessage(global::CSTJR.RPC.Message.Contracts.SendTaskRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SendTaskMessage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::CSTJR.RPC.Message.Contracts.SendTaskReply SendTaskMessage(global::CSTJR.RPC.Message.Contracts.SendTaskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendTaskMessage, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::CSTJR.RPC.Message.Contracts.SendTaskReply> SendTaskMessageAsync(global::CSTJR.RPC.Message.Contracts.SendTaskRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SendTaskMessageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::CSTJR.RPC.Message.Contracts.SendTaskReply> SendTaskMessageAsync(global::CSTJR.RPC.Message.Contracts.SendTaskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendTaskMessage, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override MessageServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MessageServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(MessageServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SendMessage, serviceImpl.SendMessage)
          .AddMethod(__Method_SendTaskMessage, serviceImpl.SendTaskMessage).Build();
    }

  }
}
#endregion
